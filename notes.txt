s = Faraday spectrum
d = q+1j u

R = Maps a Faraday spectrum to the respective data
R: domain(s) -> domain(d)

Standard approach:
Compute "dirty image": R^\dagger(d)  # Assuming all weights = 1
This gives the "dirty Faraday spectrum" which is then "cleaned" to obtain the "true Faraday spectrum"


Alternatively:
Look at P(s | d): domain(s) -> positive real numbers
This is a very high-dimensional function because domain(s) has Npix dimensions -> infeasible

More in practise:
Model f: s = f(\xi) such that a priori \xi is standard normal distributed
NIFTy: Approximate P(\xi | d) in some fancy fashion (KL-divergence) with a Gaussian
Draw samples of from that Gaussian and compute e.g. mean of f(\xi) and this is our best guess for the "true" Faraday spectrum.

Note: In this approach no cleaning step is needed.

Even more in practise:
1. We are given only data points but without errorbars. -> First step: look at the data and estimate the noise level by eye.
2. Need to implement R, R.adjoint. That's essentially a non-uniform Fourier transform. Let's start from the explicit summation.
3. Set up f, i.e. set up the prior on s. I suggest to use CorrelatedFieldModel for the real part and the imaginary part individually, i.e. use a lognormal Gaussian process with isotropic and homogeneous but unknown correlation structure:
re = ift.SimpleCorrelatedField(..., prefix='real')
im = ift.SimpleCorrelatedField(..., prefix='imag')

likelihood = ift.GaussianEnergy(mean=q+1j*u, inverse_covariance=1/sigma^2) @ R @ (re.real + 1j*im.real)

Later:
- Let NIFTy learn the noise level as well.
- Do not use explicit summation/FT but rather a 1D (de)gridding approach. Only if performance is a problem.
